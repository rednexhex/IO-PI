-- MattPi Plugin
-- by Matty
--Feburary 2025

-- Information block for the plugin

PluginInfo = {
  Name = "Matty~MattyPi~Relay/IO_Control",
  Version = "1.0",
  BuildVersion = "1.0.0.9",
  Id ="738f2f69-1527-42fa-8469-65ee4ae1b834",
  Author = "Matt Gililland",
  Description = "Control of Raspberry Pi I/Os"
}

Signature = ""

logo = ""

-- Define the color of the plugin object in the design
function GetColor(props)
  return { 155, 66, 245 }
end

-- The name that will initially display when dragged into a design
function GetPrettyName(props)
  return "MattyPi"
end

-- Define User configurable Properties of the plugin
function GetProperties()
  local props = {}
  table.insert(props, {
    Name = "Debug Print",
    Type = "enum",
    Choices = {"None", "Tx/Rx", "Tx", "Rx", "Function Calls", "All"},
    Value = "All"
  })
  return props
end

-- Optional function to update available properties when properties are altered by the user
function RectifyProperties(props)
  if props.plugin_show_debug.Value == false then 
    props["Debug Print"].IsHidden = true 
  end
  return props
end

--Layout of controls and graphics for the plugin UI to display
function GetControlLayout(props)
  local layout = {}
  local graphics = {}
  
  ---  action   ----
  
  layout["address"] = {
    PrettyName = "IP Address",
    Style = "Text",
    TextBoxStyle = "Normal",
    Position = {100, 10},
    Size = {100, 16}
  }
  layout["port"] = {
    PrettyName = "Port",
    Style = "Text",
    TextBoxStyle = "Normal",
    Position = {100, 30},
    Size = {100, 16}
  }
  table.insert(graphics, {
    Type = "Text",
    Text = "IP Address:",
    Position = {5, 5},
    Size = {80, 16},
    FontSize = 14,
    HTextAlign = "Right"
  })
  table.insert(graphics, {
    Type = "Text",
    Text = "Port:",
    Position = {5, 25},
    Size = {80, 16},
    FontSize = 14,
    HTextAlign = "Right"
  })
  
  
  
  layout["rly1"] = {
      PrettyName = "Relay 1",
      Style = "Button",
      Legend = "Push",
      Position = {30,60},
      Size = {50,16},
      Color = {0,0,0}
    }  
    layout["rlyled1"] = {
      PrettyName = "Relay 1 LED",
      Style = "LED",
      Position = {80,60},
      Size = {15,15},
      Color = {255,0,0}
    }
    layout["rlytime1"] = {
      PrettyName = "Timer 1",
      Style = "Text",
      TextBoxStyle = "Normal",
      Position = {100, 60},
      Size = {20, 16}
    }
    table.insert(graphics, {
      Type = "Text",
      Text = "Relay 1 Pulse Time",
      Position = {125, 60},
      Size = {110, 16},
      FontSize = 12,
      HTextAlign = "Right"
    })
    
  
    layout["rly2"] = {
      PrettyName = "Relay 2",
      Style = "Button",
      Legend = "Push",
      Position = {30,80},
      Size = {50,16},
      Color = {0,0,0}
    }
    layout["rlyled2"] = {
      PrettyName = "Relay 2 LED",
      Style = "LED",
      Position = {80,80},
      Size = {15,15},
      Color = {255,0,0}
    }
    layout["rlytime2"] = {
      PrettyName = "Timer 2",
      Style = "Text",
      TextBoxStyle = "Normal",
      Position = {100, 80},
      Size = {20, 16}
    }
    table.insert(graphics, {
      Type = "Text",
      Text = "Relay 2 Pulse Time",
      Position = {125, 80},
      Size = {110, 16},
      FontSize = 12,
      HTextAlign = "Right"
    })
    
    
    layout["rly3"] = {
      PrettyName = "Relay 3",
      Style = "Button",
      Legend = "Push",
      Position = {30,100},
      Size = {50,16},
      Color = {0,0,0}
    }
    layout["rlyled3"] = {
      PrettyName = "Relay 3 LED",
      Style = "LED",
      Position = {80,100},
      Size = {15,15},
      Color = {255,0,0}
    }
    layout["rlytime3"] = {
      PrettyName = "Timer 3",
      Style = "Text",
      TextBoxStyle = "Normal",
      Position = {100, 100},
      Size = {20, 16}
    }
    table.insert(graphics, {
      Type = "Text",
      Text = "Relay 3 Pulse Time",
      Position = {125, 100},
      Size = {110, 16},
      FontSize = 12,
      HTextAlign = "Right"
    })
  
    layout["rly4"] = {
      PrettyName = "Relay 4",
      Style = "Button",
      Legend = "Push",
      Position = {30,120},
      Size = {50,16},
      Color = {0,0,0}
    }
    layout["rlyled4"] = {
      PrettyName = "Relay 4 LED",
      Style = "LED",
      Position = {80,120},
      Size = {15,15},
      Color = {255,0,0}
    }
    layout["rlytime4"] = {
      PrettyName = "Timer 4",
      Style = "Text",
      TextBoxStyle = "Normal",
      Position = {100, 120},
      Size = {20, 16}
    }
    table.insert(graphics, {
      Type = "Text",
      Text = "Relay 4 Pulse Time",
      Position = {125, 120},
      Size = {110, 16},
      FontSize = 12,
      HTextAlign = "Right"
    })
    
  
  table.insert(graphics,{
    Type = "Text",
    Text = "Build Info",
    FontSize = 12,
    HTextAlign = "Left",
    Position = {0, 180},
    Size = {62, 20}
  })
  table.insert(graphics,{
    Type = "Text",
    Text = "v" .. PluginInfo.BuildVersion,
    FontSize = 12,
    HTextAlign = "Left",
    Position = {0, 200},
    Size = {62, 20}
  })
  
  table.insert(graphics,{
    Type="Image",
    Image=logo,
    Position={85,200},
    Size={80,60}
  })
  
  table.insert(graphics,{
    Type="Image",
    Image=Signature,
    Position={0,160},
    ZOrder = 1,
    Size={20,23}
  })
  return layout, graphics
end

-- Defines the Controls used within the plugin
function GetControls(props)
  local ctrls = {}
  
    table.insert(ctrls, {
      Name = "address",
      ControlType = "Text",
      DefaultValue = 'Enter and IP Address' 
    })
    table.insert(ctrls, {
      Name = "port",
      ControlType = "Knob",
      ControlUnit = "Integer",
      Min = 1,
      Max = 65535,
      DefaultValue = 1081
    })
  
    table.insert(ctrls, {
      Name = "rly1",
      ControlType = "Button",
      ButtonType = "Trigger",
      UserPin = true,
      PinStyle = "Input",
      Count = 1
    })
    table.insert(ctrls, {
      Name = "rlytime1",
      ControlType = "Knob",
      ControlUnit = "Integer",
      Min = 0,
      Max = 60,
      DefaultValue = 0
    })
    table.insert(ctrls, {
      Name = "rlyled1",
      ControlType = "Indicator",
      IndicatorType = "LED",
      UserPin = false,
      Count = 1
    })
  
    table.insert(ctrls, {
      Name = "rly2",
      ControlType = "Button",
      ButtonType = "Trigger",
      UserPin = true,
      PinStyle = "Input",
      Count = 1
    })
    table.insert(ctrls, {
      Name = "rlytime2",
      ControlType = "Knob",
      ControlUnit = "Integer",
      Min = 0,
      Max = 60,
      DefaultValue = 0
    })
    table.insert(ctrls, {
      Name = "rlyled2",
      ControlType = "Indicator",
      IndicatorType = "LED",
      UserPin = false,
      Count = 1
    })
  
    table.insert(ctrls, {
      Name = "rly3",
      ControlType = "Button",
      ButtonType = "Trigger",
      UserPin = true,
      PinStyle = "Input",
      Count = 1
    })
    table.insert(ctrls, {
      Name = "rlytime3",
      ControlType = "Knob",
      ControlUnit = "Integer",
      Min = 0,
      Max = 60,
      DefaultValue = 0
    })
    table.insert(ctrls, {
      Name = "rlyled3",
      ControlType = "Indicator",
      IndicatorType = "LED",
      UserPin = false,
      Count = 1
    })
  
    table.insert(ctrls, {
      Name = "rly4",
      ControlType = "Button",
      ButtonType = "Trigger",
      UserPin = true,
      PinStyle = "Input",
      Count = 1
    })
    table.insert(ctrls, {
      Name = "rlytime4",
      ControlType = "Knob",
      ControlUnit = "Integer",
      Min = 0,
      Max = 60,
      DefaultValue = 0
    })
    table.insert(ctrls, {
      Name = "rlyled4",
      ControlType = "Indicator",
      IndicatorType = "LED",
      UserPin = false,
      Count = 1
    })
  return ctrls
end

--Start event based logic
if Controls then
  
  
    address = Controls.address
    port = Controls.port
    rly1 = Controls.rly1
    rly2 = Controls.rly2
    rly3 = Controls.rly3
    rly4 = Controls.rly4
    rlyled1 = Controls.rlyled1
    rlyled2 = Controls.rlyled2
    rlyled3 = Controls.rlyled3
    rlyled4 = Controls.rlyled4
    rlytime1 = Controls.rlytime1
    rlytime2 = Controls.rlytime2
    rlytime3 = Controls.rlytime3
    rlytime4 = Controls.rlytime4
  
  
    ----  Sockets   ---
    sock = TcpSocket.New()
    sock.ReadTimeout = 0
    sock.WriteTimeout = 0
    sock.ReconnectTimeout = 5
  
    -- Constants
    EOL = "\r\n"                       -- End of line character as defined in device's API
    EOLCharacter = TcpSocket.EOL.Lf  -- EOL Character lookup for TCPSocket ReadLine
    
  
    
    sock.EventHandler = function(sock, evt, err)
      if evt == TcpSocket.Events.Connected then
        print( "socket connected" )
      elseif evt == TcpSocket.Events.Reconnect then
        print( "socket reconnecting..." )
      elseif evt == TcpSocket.Events.Data then
        print( "socket has data" )
        message = sock:ReadLine(TcpSocket.EOL.Any)
        print('rx=',message)
        while (message ~= nil) do
          print( "reading until CrLf got "..message )
          message = sock:ReadLine(TcpSocket.EOL.Any)
        end
      elseif evt == TcpSocket.Events.Closed then
        print( "socket closed by remote" )
      elseif evt == TcpSocket.Events.Error then
        print( "socket closed due to error", err )
      elseif evt == TcpSocket.Events.Timeout then
        print( "socket closed due to timeout" )
      else
        print( "unknown socket event", evt ) --should never happen
      end
    end
  
    rlytime1 = rlytime1.String
    rlytime2 = rlytime2.String
    rlytime3 = rlytime3.String
    rlytime4 = rlytime4.String
  
      
  Controls.rly1.EventHandler = function()
    sock:Write("relstate,1:1")
    rlyled1.Boolean = true
    TimeInSeconds = rlytime1
    Timer.CallAfter(function()
    sock:Write("setstate,1:1")
    rlyled1.Boolean = false
    end, TimeInSeconds)
  end
  
  Controls.rly2.EventHandler = function()
    sock:Write("relstate,2:1")
    rlyled2.Boolean = true
    TimeInSeconds = rlytime2
    Timer.CallAfter(function()
    sock:Write("relstate,2:0")
    rlyled2.Boolean = false
    end, TimeInSeconds)
  end     
  
  Controls.rly3.EventHandler = function()
    sock:Write("relstate,3:1")
    rlyled3.Boolean = true
    TimeInSeconds = rlytime3
    Timer.CallAfter(function()
    sock:Write("relstate,3:0")
    rlyled3.Boolean = false
    end, TimeInSeconds)
  end
  
  Controls.rly4.EventHandler = function()
    sock:Write("relstate,4:1")
    rlyled4.Boolean = true
    TimeInSeconds = rlytime4
    Timer.CallAfter(function()
    sock:Write("relstate,4:0")
    rlyled4.Boolean = false
    end, TimeInSeconds)
  end
  
  sock:Connect(address.String, port.Value)
end
